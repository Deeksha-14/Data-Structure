//heapSort and heapify methods are not declared as static because they need to access instance variables of the HeapSort class, specifically the arr array. If these methods were declared as static, they would not have access to the non-static (instance) variables of the class. Static methods cannot access or modify non-static (instance) variables directly, as there might be multiple instances of the class, and it's not clear which instance's variables should be accessed. 
	//In the given HeapSort class, the arr array is a variable specific to each instance of the class, and it is used in both the heapSort and heapify methods. Therefore, these methods need to be non-static so that they can access the arr array of the current instance of the class.
	//If heapSort and heapify are made static, they won't be able to work with the specific instance's data, and they might inadvertently modify or access data from other instances. This could lead to data conflicts and incorrect behavior.
	//Making methods static limits their flexibility and reusability. With non-static methods, you can create multiple instances of the class and use each instance independently. However, with static methods, you lose this flexibility and can only work with a single set of data.
	//the heapSort and heapify methods need to access the arr array, which is an instance variable specific to each instance of the HeapSort class. If these methods are made static, they won't have access to the arr array, and the code will not compile.
